"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/practice/page",{

/***/ "(app-pages-browser)/./app/utils/userProgress.ts":
/*!***********************************!*\
  !*** ./app/utils/userProgress.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addAchievement: () => (/* binding */ addAchievement),\n/* harmony export */   addActivity: () => (/* binding */ addActivity),\n/* harmony export */   getUserProgress: () => (/* binding */ getUserProgress),\n/* harmony export */   initializeUserProgress: () => (/* binding */ initializeUserProgress),\n/* harmony export */   markLessonCompleted: () => (/* binding */ markLessonCompleted),\n/* harmony export */   markTopicCompleted: () => (/* binding */ markTopicCompleted),\n/* harmony export */   recordQuizCompletion: () => (/* binding */ recordQuizCompletion),\n/* harmony export */   updateStreak: () => (/* binding */ updateStreak),\n/* harmony export */   updateStudyTime: () => (/* binding */ updateStudyTime)\n/* harmony export */ });\n/* harmony import */ var _firebase_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../firebase/config */ \"(app-pages-browser)/./app/firebase/config.ts\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n\n\n// Initialize user progress when they first sign up\nasync function initializeUserProgress(userId) {\n    const userProgressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db, 'userProgress', userId);\n    const initialProgress = {\n        userId,\n        subjects: {},\n        totalStudyTime: 0,\n        currentStreak: 0,\n        longestStreak: 0,\n        lastStudyDate: new Date(),\n        recentActivity: [] // Initialize as empty array\n    };\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)(userProgressRef, initialProgress);\n    return initialProgress;\n}\n// Get user progress\nasync function getUserProgress(userId) {\n    const userProgressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db, 'userProgress', userId);\n    const docSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(userProgressRef);\n    if (docSnap.exists()) {\n        const data = docSnap.data();\n        // Initialize recentActivity if it doesn't exist\n        if (!data.recentActivity || !Array.isArray(data.recentActivity)) {\n            data.recentActivity = [];\n        }\n        // Clean and validate each activity\n        data.recentActivity = data.recentActivity.map((activity)=>{\n            // If activity is empty or invalid, return a default activity\n            if (!activity || typeof activity !== 'object' || Object.keys(activity).length === 0) {\n                return {\n                    id: Date.now().toString(),\n                    type: 'study',\n                    subject: 'unknown',\n                    topic: 'unknown',\n                    timestamp: new Date().toISOString()\n                };\n            }\n            // Ensure all required fields exist with proper types\n            return {\n                id: activity.id || Date.now().toString(),\n                type: activity.type || 'study',\n                subject: activity.subject || 'unknown',\n                topic: activity.topic || 'unknown',\n                timestamp: activity.timestamp ? new Date(activity.timestamp).toISOString() : new Date().toISOString()\n            };\n        });\n        return data;\n    }\n    return null;\n}\n// Mark lesson as completed\nasync function markLessonCompleted(userId, subjectId, topicId, lessonId) {\n    const userProgressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db, 'userProgress', userId);\n    const progress = await getUserProgress(userId);\n    if (progress) {\n        // Initialize subjects if it doesn't exist\n        const subjects = progress.subjects || {};\n        const subject = subjects[subjectId] || {\n            progress: 0,\n            completedTopics: [],\n            completedLessons: {},\n            lastStudied: new Date().toISOString()\n        };\n        // Update completed lessons\n        const topicLessons = subject.completedLessons[topicId] || [];\n        if (!topicLessons.includes(lessonId)) {\n            topicLessons.push(lessonId);\n        }\n        // Calculate topic progress\n        const topicProgress = calculateTopicProgress(topicLessons);\n        // Update subject progress\n        const updatedSubjects = {\n            ...subjects,\n            [subjectId]: {\n                ...subject,\n                completedLessons: {\n                    ...subject.completedLessons,\n                    [topicId]: topicLessons\n                },\n                progress: calculateSubjectProgress(subject, topicId, topicProgress),\n                lastStudied: new Date().toISOString()\n            }\n        };\n        // Create activity with proper timestamp\n        const activity = {\n            id: Date.now().toString(),\n            type: 'study',\n            subject: subjectId,\n            topic: topicId,\n            lessonId,\n            timestamp: new Date().toISOString()\n        };\n        // Update both subjects and add activity in one transaction\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(userProgressRef, {\n            subjects: updatedSubjects,\n            recentActivity: [\n                activity,\n                ...progress.recentActivity || []\n            ].slice(0, 10)\n        });\n    }\n}\n// Calculate topic progress based on completed lessons\nfunction calculateTopicProgress(completedLessons) {\n    // Assuming each topic has a fixed number of lessons (e.g., 5)\n    const totalLessons = 5; // This should be dynamic based on actual lesson count\n    return completedLessons.length / totalLessons * 100;\n}\n// Calculate subject progress based on topic progress\nfunction calculateSubjectProgress(subject, updatedTopicId, updatedTopicProgress) {\n    const topics = Object.keys(subject.completedLessons);\n    const totalTopics = topics.length;\n    if (totalTopics === 0) return 0;\n    let totalProgress = 0;\n    topics.forEach((topicId)=>{\n        const topicLessons = subject.completedLessons[topicId] || [];\n        const topicProgress = calculateTopicProgress(topicLessons);\n        totalProgress += topicProgress;\n    });\n    return totalProgress / totalTopics;\n}\n// Update study time\nasync function updateStudyTime(userId, minutesStudied) {\n    const userProgressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db, 'userProgress', userId);\n    const progress = await getUserProgress(userId);\n    if (progress) {\n        const totalStudyTime = progress.totalStudyTime + minutesStudied;\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(userProgressRef, {\n            totalStudyTime\n        });\n    }\n}\n// Mark topic as completed\nasync function markTopicCompleted(userId, subjectId, topicId) {\n    const userProgressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db, 'userProgress', userId);\n    const progress = await getUserProgress(userId);\n    if (progress) {\n        const subject = progress.subjects[subjectId] || {\n            progress: 0,\n            completedTopics: [],\n            lastStudied: new Date()\n        };\n        if (!subject.completedTopics.includes(topicId)) {\n            const updatedSubjects = {\n                ...progress.subjects,\n                [subjectId]: {\n                    ...subject,\n                    completedTopics: [\n                        ...subject.completedTopics,\n                        topicId\n                    ],\n                    lastStudied: new Date()\n                }\n            };\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(userProgressRef, {\n                subjects: updatedSubjects\n            });\n            // Add activity\n            const activity = {\n                id: Date.now().toString(),\n                type: 'study',\n                subject: subjectId,\n                topic: topicId,\n                timestamp: new Date()\n            };\n            await addActivity(userId, activity);\n        }\n    }\n}\n// Update streak\nasync function updateStreak(userId) {\n    const userProgressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db, 'userProgress', userId);\n    const progress = await getUserProgress(userId);\n    if (progress) {\n        const lastStudyDate = new Date(progress.lastStudyDate);\n        const today = new Date();\n        const diffDays = Math.floor((today.getTime() - lastStudyDate.getTime()) / (1000 * 60 * 60 * 24));\n        let currentStreak = progress.currentStreak;\n        if (diffDays === 1) {\n            // Consecutive day\n            currentStreak += 1;\n            const longestStreak = Math.max(currentStreak, progress.longestStreak);\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(userProgressRef, {\n                currentStreak,\n                longestStreak,\n                lastStudyDate: today\n            });\n        } else if (diffDays > 1) {\n            // Streak broken\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(userProgressRef, {\n                currentStreak: 1,\n                lastStudyDate: today\n            });\n        }\n        // Check for streak achievements\n        if (currentStreak === 7) {\n            await addAchievement(userId, {\n                id: 'week-streak',\n                title: 'Week Warrior',\n                description: 'Studied for 7 days in a row!',\n                unlockedAt: new Date(),\n                icon: '🔥'\n            });\n        }\n    }\n}\n// Add achievement\nasync function addAchievement(userId, achievement) {\n    const userProgressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db, 'userProgress', userId);\n    const progress = await getUserProgress(userId);\n    if (progress) {\n        const hasAchievement = progress.recentActivity.some((activity)=>activity.topic === achievement.title);\n        if (!hasAchievement) {\n            const activity = {\n                id: Date.now().toString(),\n                type: 'study',\n                subject: 'achievements',\n                topic: achievement.title,\n                timestamp: new Date()\n            };\n            await addActivity(userId, activity);\n        }\n    }\n}\n// Add activity\nasync function addActivity(userId, activity) {\n    const userProgressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db, 'userProgress', userId);\n    const progress = await getUserProgress(userId);\n    if (progress) {\n        // Ensure all required fields are present and timestamp is in ISO format\n        const activityWithTimestamp = {\n            id: activity.id || Date.now().toString(),\n            type: activity.type || 'study',\n            subject: activity.subject || 'unknown',\n            topic: activity.topic || 'unknown',\n            timestamp: activity.timestamp instanceof Date ? activity.timestamp.toISOString() : new Date().toISOString()\n        };\n        // Ensure recentActivity exists and is an array\n        const currentActivities = Array.isArray(progress.recentActivity) ? progress.recentActivity : [];\n        const updatedActivities = [\n            activityWithTimestamp,\n            ...currentActivities\n        ].slice(0, 10); // Keep only last 10 activities\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(userProgressRef, {\n            recentActivity: updatedActivities\n        });\n    }\n}\n// Record quiz completion\nasync function recordQuizCompletion(userId, subject, score) {\n    const activity = {\n        id: Date.now().toString(),\n        type: 'study',\n        subject,\n        topic: 'quiz',\n        timestamp: new Date(),\n        score\n    };\n    await addActivity(userId, activity);\n    // Check for achievements\n    if (score >= 90) {\n        await addAchievement(userId, {\n            id: 'high-scorer',\n            title: 'High Scorer',\n            description: 'Scored 90% or higher on a quiz!',\n            unlockedAt: new Date(),\n            icon: '🎯'\n        });\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/utils/userProgress.ts\n"));

/***/ })

});