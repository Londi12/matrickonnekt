"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/study/page",{

/***/ "(app-pages-browser)/./app/utils/userProgress.ts":
/*!***********************************!*\
  !*** ./app/utils/userProgress.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addAchievement: () => (/* binding */ addAchievement),\n/* harmony export */   addActivity: () => (/* binding */ addActivity),\n/* harmony export */   getUserProgress: () => (/* binding */ getUserProgress),\n/* harmony export */   initializeUserProgress: () => (/* binding */ initializeUserProgress),\n/* harmony export */   markLessonCompleted: () => (/* binding */ markLessonCompleted),\n/* harmony export */   markTopicCompleted: () => (/* binding */ markTopicCompleted),\n/* harmony export */   recordQuizCompletion: () => (/* binding */ recordQuizCompletion),\n/* harmony export */   updateStreak: () => (/* binding */ updateStreak),\n/* harmony export */   updateStudyTime: () => (/* binding */ updateStudyTime)\n/* harmony export */ });\n/* harmony import */ var _firebase_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../firebase/config */ \"(app-pages-browser)/./app/firebase/config.ts\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n\n\n// Initialize user progress when they first sign up\nasync function initializeUserProgress(userId) {\n    const userProgressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db, 'userProgress', userId);\n    const initialProgress = {\n        userId,\n        subjects: {},\n        totalStudyTime: 0,\n        currentStreak: 0,\n        longestStreak: 0,\n        lastStudyDate: new Date(),\n        recentActivity: [] // Initialize as empty array\n    };\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)(userProgressRef, initialProgress);\n    return initialProgress;\n}\n// Get user progress\nasync function getUserProgress(userId) {\n    const userProgressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db, 'userProgress', userId);\n    const docSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(userProgressRef);\n    if (docSnap.exists()) {\n        const data = docSnap.data();\n        // Convert timestamp strings back to Date objects\n        if (data.recentActivity) {\n            data.recentActivity = data.recentActivity.map((activity)=>{\n                try {\n                    const timestamp = new Date(activity.timestamp);\n                    if (isNaN(timestamp.getTime())) {\n                        console.error('Invalid timestamp in activity:', activity);\n                        return {\n                            ...activity,\n                            timestamp: new Date() // Fallback to current date if invalid\n                        };\n                    }\n                    return {\n                        ...activity,\n                        timestamp\n                    };\n                } catch (error) {\n                    console.error('Error converting timestamp:', error);\n                    return {\n                        ...activity,\n                        timestamp: new Date() // Fallback to current date if error\n                    };\n                }\n            });\n        }\n        return data;\n    }\n    return null;\n}\n// Mark lesson as completed\nasync function markLessonCompleted(userId, subjectId, topicId, lessonId) {\n    const userProgressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db, 'userProgress', userId);\n    const progress = await getUserProgress(userId);\n    if (progress) {\n        // Initialize subjects if it doesn't exist\n        const subjects = progress.subjects || {};\n        const subject = subjects[subjectId] || {\n            progress: 0,\n            completedTopics: [],\n            completedLessons: {},\n            lastStudied: new Date()\n        };\n        // Update completed lessons\n        const topicLessons = subject.completedLessons[topicId] || [];\n        if (!topicLessons.includes(lessonId)) {\n            topicLessons.push(lessonId);\n        }\n        // Calculate topic progress\n        const topicProgress = calculateTopicProgress(topicLessons);\n        // Update subject progress\n        const updatedSubjects = {\n            ...subjects,\n            [subjectId]: {\n                ...subject,\n                completedLessons: {\n                    ...subject.completedLessons,\n                    [topicId]: topicLessons\n                },\n                progress: calculateSubjectProgress(subject, topicId, topicProgress),\n                lastStudied: new Date()\n            }\n        };\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(userProgressRef, {\n            subjects: updatedSubjects\n        });\n        // Add activity\n        const activity = {\n            id: Date.now().toString(),\n            type: 'study',\n            subject: subjectId,\n            topic: topicId,\n            lessonId,\n            timestamp: new Date()\n        };\n        await addActivity(userId, activity);\n    }\n}\n// Calculate topic progress based on completed lessons\nfunction calculateTopicProgress(completedLessons) {\n    // Assuming each topic has a fixed number of lessons (e.g., 5)\n    const totalLessons = 5; // This should be dynamic based on actual lesson count\n    return completedLessons.length / totalLessons * 100;\n}\n// Calculate subject progress based on topic progress\nfunction calculateSubjectProgress(subject, updatedTopicId, updatedTopicProgress) {\n    const topics = Object.keys(subject.completedLessons);\n    const totalTopics = topics.length;\n    if (totalTopics === 0) return 0;\n    let totalProgress = 0;\n    topics.forEach((topicId)=>{\n        const topicLessons = subject.completedLessons[topicId] || [];\n        const topicProgress = calculateTopicProgress(topicLessons);\n        totalProgress += topicProgress;\n    });\n    return totalProgress / totalTopics;\n}\n// Update study time\nasync function updateStudyTime(userId, minutesStudied) {\n    const userProgressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db, 'userProgress', userId);\n    const progress = await getUserProgress(userId);\n    if (progress) {\n        const totalStudyTime = progress.totalStudyTime + minutesStudied;\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(userProgressRef, {\n            totalStudyTime\n        });\n    }\n}\n// Mark topic as completed\nasync function markTopicCompleted(userId, subjectId, topicId) {\n    const userProgressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db, 'userProgress', userId);\n    const progress = await getUserProgress(userId);\n    if (progress) {\n        const subject = progress.subjects[subjectId] || {\n            progress: 0,\n            completedTopics: [],\n            lastStudied: new Date()\n        };\n        if (!subject.completedTopics.includes(topicId)) {\n            const updatedSubjects = {\n                ...progress.subjects,\n                [subjectId]: {\n                    ...subject,\n                    completedTopics: [\n                        ...subject.completedTopics,\n                        topicId\n                    ],\n                    lastStudied: new Date()\n                }\n            };\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(userProgressRef, {\n                subjects: updatedSubjects\n            });\n            // Add activity\n            const activity = {\n                id: Date.now().toString(),\n                type: 'study',\n                subject: subjectId,\n                topic: topicId,\n                timestamp: new Date()\n            };\n            await addActivity(userId, activity);\n        }\n    }\n}\n// Update streak\nasync function updateStreak(userId) {\n    const userProgressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db, 'userProgress', userId);\n    const progress = await getUserProgress(userId);\n    if (progress) {\n        const lastStudyDate = new Date(progress.lastStudyDate);\n        const today = new Date();\n        const diffDays = Math.floor((today.getTime() - lastStudyDate.getTime()) / (1000 * 60 * 60 * 24));\n        let currentStreak = progress.currentStreak;\n        if (diffDays === 1) {\n            // Consecutive day\n            currentStreak += 1;\n            const longestStreak = Math.max(currentStreak, progress.longestStreak);\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(userProgressRef, {\n                currentStreak,\n                longestStreak,\n                lastStudyDate: today\n            });\n        } else if (diffDays > 1) {\n            // Streak broken\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(userProgressRef, {\n                currentStreak: 1,\n                lastStudyDate: today\n            });\n        }\n        // Check for streak achievements\n        if (currentStreak === 7) {\n            await addAchievement(userId, {\n                id: 'week-streak',\n                title: 'Week Warrior',\n                description: 'Studied for 7 days in a row!',\n                unlockedAt: new Date(),\n                icon: '🔥'\n            });\n        }\n    }\n}\n// Add achievement\nasync function addAchievement(userId, achievement) {\n    const userProgressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db, 'userProgress', userId);\n    const progress = await getUserProgress(userId);\n    if (progress) {\n        const hasAchievement = progress.recentActivity.some((activity)=>activity.topic === achievement.title);\n        if (!hasAchievement) {\n            const activity = {\n                id: Date.now().toString(),\n                type: 'study',\n                subject: 'achievements',\n                topic: achievement.title,\n                timestamp: new Date()\n            };\n            await addActivity(userId, activity);\n        }\n    }\n}\n// Add activity\nasync function addActivity(userId, activity) {\n    const userProgressRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(_firebase_config__WEBPACK_IMPORTED_MODULE_0__.db, 'userProgress', userId);\n    const progress = await getUserProgress(userId);\n    if (progress) {\n        // Ensure timestamp is stored as a Firestore timestamp\n        const activityWithTimestamp = {\n            ...activity,\n            timestamp: activity.timestamp instanceof Date ? activity.timestamp.toISOString() : new Date().toISOString()\n        };\n        const updatedActivities = [\n            activityWithTimestamp,\n            ...progress.recentActivity\n        ].slice(0, 10); // Keep only last 10 activities\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(userProgressRef, {\n            recentActivity: updatedActivities\n        });\n    }\n}\n// Record quiz completion\nasync function recordQuizCompletion(userId, subject, score) {\n    const activity = {\n        id: Date.now().toString(),\n        type: 'study',\n        subject,\n        topic: 'quiz',\n        timestamp: new Date(),\n        score\n    };\n    await addActivity(userId, activity);\n    // Check for achievements\n    if (score >= 90) {\n        await addAchievement(userId, {\n            id: 'high-scorer',\n            title: 'High Scorer',\n            description: 'Scored 90% or higher on a quiz!',\n            unlockedAt: new Date(),\n            icon: '🎯'\n        });\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC91dGlscy91c2VyUHJvZ3Jlc3MudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBd0M7QUFDNkM7QUFXckYsbURBQW1EO0FBQzVDLGVBQWVLLHVCQUF1QkMsTUFBYztJQUN6RCxNQUFNQyxrQkFBa0JOLHVEQUFHQSxDQUFDRCxnREFBRUEsRUFBRSxnQkFBZ0JNO0lBRWhELE1BQU1FLGtCQUFnQztRQUNwQ0Y7UUFDQUcsVUFBVSxDQUFDO1FBQ1hDLGdCQUFnQjtRQUNoQkMsZUFBZTtRQUNmQyxlQUFlO1FBQ2ZDLGVBQWUsSUFBSUM7UUFDbkJDLGdCQUFnQixFQUFFLENBQUMsNEJBQTRCO0lBQ2pEO0lBRUEsTUFBTVosMERBQU1BLENBQUNJLGlCQUFpQkM7SUFDOUIsT0FBT0E7QUFDVDtBQUVBLG9CQUFvQjtBQUNiLGVBQWVRLGdCQUFnQlYsTUFBYztJQUNsRCxNQUFNQyxrQkFBa0JOLHVEQUFHQSxDQUFDRCxnREFBRUEsRUFBRSxnQkFBZ0JNO0lBQ2hELE1BQU1XLFVBQVUsTUFBTWYsMERBQU1BLENBQUNLO0lBRTdCLElBQUlVLFFBQVFDLE1BQU0sSUFBSTtRQUNwQixNQUFNQyxPQUFPRixRQUFRRSxJQUFJO1FBQ3pCLGlEQUFpRDtRQUNqRCxJQUFJQSxLQUFLSixjQUFjLEVBQUU7WUFDdkJJLEtBQUtKLGNBQWMsR0FBR0ksS0FBS0osY0FBYyxDQUFDSyxHQUFHLENBQUMsQ0FBQ0M7Z0JBQzdDLElBQUk7b0JBQ0YsTUFBTUMsWUFBWSxJQUFJUixLQUFLTyxTQUFTQyxTQUFTO29CQUM3QyxJQUFJQyxNQUFNRCxVQUFVRSxPQUFPLEtBQUs7d0JBQzlCQyxRQUFRQyxLQUFLLENBQUMsa0NBQWtDTDt3QkFDaEQsT0FBTzs0QkFDTCxHQUFHQSxRQUFROzRCQUNYQyxXQUFXLElBQUlSLE9BQU8sc0NBQXNDO3dCQUM5RDtvQkFDRjtvQkFDQSxPQUFPO3dCQUNMLEdBQUdPLFFBQVE7d0JBQ1hDO29CQUNGO2dCQUNGLEVB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TztZQUNQQyxhQUFhO1lBQ2JDLFlBQVksSUFBSXpEO1lBQ2hCMEQsTUFBTTtRQUNSO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxMb25kaVxcRGVza3RvcFxccHJvamVjdHNcXG1hdHJpY2tvbm5la3RcXGFwcFxcdXRpbHNcXHVzZXJQcm9ncmVzcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkYiB9IGZyb20gJy4uL2ZpcmViYXNlL2NvbmZpZyc7XHJcbmltcG9ydCB7IGRvYywgZ2V0RG9jLCBzZXREb2MsIHVwZGF0ZURvYywgc2VydmVyVGltZXN0YW1wIH0gZnJvbSAnZmlyZWJhc2UvZmlyZXN0b3JlJztcclxuaW1wb3J0IHsgVXNlclByb2dyZXNzLCBBY3Rpdml0eSwgU3R1ZHlBY3Rpdml0eSB9IGZyb20gJy4uL3R5cGVzL3VzZXInO1xyXG5cclxuaW50ZXJmYWNlIEFjaGlldmVtZW50IHtcclxuICBpZDogc3RyaW5nO1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgZGVzY3JpcHRpb246IHN0cmluZztcclxuICB1bmxvY2tlZEF0OiBEYXRlO1xyXG4gIGljb246IHN0cmluZztcclxufVxyXG5cclxuLy8gSW5pdGlhbGl6ZSB1c2VyIHByb2dyZXNzIHdoZW4gdGhleSBmaXJzdCBzaWduIHVwXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0aWFsaXplVXNlclByb2dyZXNzKHVzZXJJZDogc3RyaW5nKSB7XHJcbiAgY29uc3QgdXNlclByb2dyZXNzUmVmID0gZG9jKGRiLCAndXNlclByb2dyZXNzJywgdXNlcklkKTtcclxuICBcclxuICBjb25zdCBpbml0aWFsUHJvZ3Jlc3M6IFVzZXJQcm9ncmVzcyA9IHtcclxuICAgIHVzZXJJZCxcclxuICAgIHN1YmplY3RzOiB7fSxcclxuICAgIHRvdGFsU3R1ZHlUaW1lOiAwLFxyXG4gICAgY3VycmVudFN0cmVhazogMCxcclxuICAgIGxvbmdlc3RTdHJlYWs6IDAsXHJcbiAgICBsYXN0U3R1ZHlEYXRlOiBuZXcgRGF0ZSgpLFxyXG4gICAgcmVjZW50QWN0aXZpdHk6IFtdIC8vIEluaXRpYWxpemUgYXMgZW1wdHkgYXJyYXlcclxuICB9O1xyXG5cclxuICBhd2FpdCBzZXREb2ModXNlclByb2dyZXNzUmVmLCBpbml0aWFsUHJvZ3Jlc3MpO1xyXG4gIHJldHVybiBpbml0aWFsUHJvZ3Jlc3M7XHJcbn1cclxuXHJcbi8vIEdldCB1c2VyIHByb2dyZXNzXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRVc2VyUHJvZ3Jlc3ModXNlcklkOiBzdHJpbmcpOiBQcm9taXNlPFVzZXJQcm9ncmVzcyB8IG51bGw+IHtcclxuICBjb25zdCB1c2VyUHJvZ3Jlc3NSZWYgPSBkb2MoZGIsICd1c2VyUHJvZ3Jlc3MnLCB1c2VySWQpO1xyXG4gIGNvbnN0IGRvY1NuYXAgPSBhd2FpdCBnZXREb2ModXNlclByb2dyZXNzUmVmKTtcclxuICBcclxuICBpZiAoZG9jU25hcC5leGlzdHMoKSkge1xyXG4gICAgY29uc3QgZGF0YSA9IGRvY1NuYXAuZGF0YSgpO1xyXG4gICAgLy8gQ29udmVydCB0aW1lc3RhbXAgc3RyaW5ncyBiYWNrIHRvIERhdGUgb2JqZWN0c1xyXG4gICAgaWYgKGRhdGEucmVjZW50QWN0aXZpdHkpIHtcclxuICAgICAgZGF0YS5yZWNlbnRBY3Rpdml0eSA9IGRhdGEucmVjZW50QWN0aXZpdHkubWFwKChhY3Rpdml0eTogYW55KSA9PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKGFjdGl2aXR5LnRpbWVzdGFtcCk7XHJcbiAgICAgICAgICBpZiAoaXNOYU4odGltZXN0YW1wLmdldFRpbWUoKSkpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignSW52YWxpZCB0aW1lc3RhbXAgaW4gYWN0aXZpdHk6JywgYWN0aXZpdHkpO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgIC4uLmFjdGl2aXR5LFxyXG4gICAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSAvLyBGYWxsYmFjayB0byBjdXJyZW50IGRhdGUgaWYgaW52YWxpZFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgLi4uYWN0aXZpdHksXHJcbiAgICAgICAgICAgIHRpbWVzdGFtcFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY29udmVydGluZyB0aW1lc3RhbXA6JywgZXJyb3IpO1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgLi4uYWN0aXZpdHksXHJcbiAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSAvLyBGYWxsYmFjayB0byBjdXJyZW50IGRhdGUgaWYgZXJyb3JcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBkYXRhIGFzIFVzZXJQcm9ncmVzcztcclxuICB9XHJcbiAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbi8vIE1hcmsgbGVzc29uIGFzIGNvbXBsZXRlZFxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFya0xlc3NvbkNvbXBsZXRlZChcclxuICB1c2VySWQ6IHN0cmluZyxcclxuICBzdWJqZWN0SWQ6IHN0cmluZyxcclxuICB0b3BpY0lkOiBzdHJpbmcsXHJcbiAgbGVzc29uSWQ6IG51bWJlclxyXG4pIHtcclxuICBjb25zdCB1c2VyUHJvZ3Jlc3NSZWYgPSBkb2MoZGIsICd1c2VyUHJvZ3Jlc3MnLCB1c2VySWQpO1xyXG4gIGNvbnN0IHByb2dyZXNzID0gYXdhaXQgZ2V0VXNlclByb2dyZXNzKHVzZXJJZCk7XHJcblxyXG4gIGlmIChwcm9ncmVzcykge1xyXG4gICAgLy8gSW5pdGlhbGl6ZSBzdWJqZWN0cyBpZiBpdCBkb2Vzbid0IGV4aXN0XHJcbiAgICBjb25zdCBzdWJqZWN0cyA9IHByb2dyZXNzLnN1YmplY3RzIHx8IHt9O1xyXG4gICAgXHJcbiAgICBjb25zdCBzdWJqZWN0ID0gc3ViamVjdHNbc3ViamVjdElkXSB8fCB7XHJcbiAgICAgIHByb2dyZXNzOiAwLFxyXG4gICAgICBjb21wbGV0ZWRUb3BpY3M6IFtdLFxyXG4gICAgICBjb21wbGV0ZWRMZXNzb25zOiB7fSxcclxuICAgICAgbGFzdFN0dWRpZWQ6IG5ldyBEYXRlKClcclxuICAgIH07XHJcblxyXG4gICAgLy8gVXBkYXRlIGNvbXBsZXRlZCBsZXNzb25zXHJcbiAgICBjb25zdCB0b3BpY0xlc3NvbnMgPSBzdWJqZWN0LmNvbXBsZXRlZExlc3NvbnNbdG9waWNJZF0gfHwgW107XHJcbiAgICBpZiAoIXRvcGljTGVzc29ucy5pbmNsdWRlcyhsZXNzb25JZCkpIHtcclxuICAgICAgdG9waWNMZXNzb25zLnB1c2gobGVzc29uSWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENhbGN1bGF0ZSB0b3BpYyBwcm9ncmVzc1xyXG4gICAgY29uc3QgdG9waWNQcm9ncmVzcyA9IGNhbGN1bGF0ZVRvcGljUHJvZ3Jlc3ModG9waWNMZXNzb25zKTtcclxuICAgIFxyXG4gICAgLy8gVXBkYXRlIHN1YmplY3QgcHJvZ3Jlc3NcclxuICAgIGNvbnN0IHVwZGF0ZWRTdWJqZWN0cyA9IHtcclxuICAgICAgLi4uc3ViamVjdHMsXHJcbiAgICAgIFtzdWJqZWN0SWRdOiB7XHJcbiAgICAgICAgLi4uc3ViamVjdCxcclxuICAgICAgICBjb21wbGV0ZWRMZXNzb25zOiB7XHJcbiAgICAgICAgICAuLi5zdWJqZWN0LmNvbXBsZXRlZExlc3NvbnMsXHJcbiAgICAgICAgICBbdG9waWNJZF06IHRvcGljTGVzc29uc1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcHJvZ3Jlc3M6IGNhbGN1bGF0ZVN1YmplY3RQcm9ncmVzcyhzdWJqZWN0LCB0b3BpY0lkLCB0b3BpY1Byb2dyZXNzKSxcclxuICAgICAgICBsYXN0U3R1ZGllZDogbmV3IERhdGUoKVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGF3YWl0IHVwZGF0ZURvYyh1c2VyUHJvZ3Jlc3NSZWYsIHsgc3ViamVjdHM6IHVwZGF0ZWRTdWJqZWN0cyB9KTtcclxuXHJcbiAgICAvLyBBZGQgYWN0aXZpdHlcclxuICAgIGNvbnN0IGFjdGl2aXR5OiBTdHVkeUFjdGl2aXR5ID0ge1xyXG4gICAgICBpZDogRGF0ZS5ub3coKS50b1N0cmluZygpLFxyXG4gICAgICB0eXBlOiAnc3R1ZHknLFxyXG4gICAgICBzdWJqZWN0OiBzdWJqZWN0SWQsXHJcbiAgICAgIHRvcGljOiB0b3BpY0lkLFxyXG4gICAgICBsZXNzb25JZCxcclxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpXHJcbiAgICB9O1xyXG5cclxuICAgIGF3YWl0IGFkZEFjdGl2aXR5KHVzZXJJZCwgYWN0aXZpdHkpO1xyXG4gIH1cclxufVxyXG5cclxuLy8gQ2FsY3VsYXRlIHRvcGljIHByb2dyZXNzIGJhc2VkIG9uIGNvbXBsZXRlZCBsZXNzb25zXHJcbmZ1bmN0aW9uIGNhbGN1bGF0ZVRvcGljUHJvZ3Jlc3MoY29tcGxldGVkTGVzc29uczogbnVtYmVyW10pOiBudW1iZXIge1xyXG4gIC8vIEFzc3VtaW5nIGVhY2ggdG9waWMgaGFzIGEgZml4ZWQgbnVtYmVyIG9mIGxlc3NvbnMgKGUuZy4sIDUpXHJcbiAgY29uc3QgdG90YWxMZXNzb25zID0gNTsgLy8gVGhpcyBzaG91bGQgYmUgZHluYW1pYyBiYXNlZCBvbiBhY3R1YWwgbGVzc29uIGNvdW50XHJcbiAgcmV0dXJuIChjb21wbGV0ZWRMZXNzb25zLmxlbmd0aCAvIHRvdGFsTGVzc29ucykgKiAxMDA7XHJcbn1cclxuXHJcbi8vIENhbGN1bGF0ZSBzdWJqZWN0IHByb2dyZXNzIGJhc2VkIG9uIHRvcGljIHByb2dyZXNzXHJcbmZ1bmN0aW9uIGNhbGN1bGF0ZVN1YmplY3RQcm9ncmVzcyhcclxuICBzdWJqZWN0OiBhbnksXHJcbiAgdXBkYXRlZFRvcGljSWQ6IHN0cmluZyxcclxuICB1cGRhdGVkVG9waWNQcm9ncmVzczogbnVtYmVyXHJcbik6IG51bWJlciB7XHJcbiAgY29uc3QgdG9waWNzID0gT2JqZWN0LmtleXMoc3ViamVjdC5jb21wbGV0ZWRMZXNzb25zKTtcclxuICBjb25zdCB0b3RhbFRvcGljcyA9IHRvcGljcy5sZW5ndGg7XHJcbiAgXHJcbiAgaWYgKHRvdGFsVG9waWNzID09PSAwKSByZXR1cm4gMDtcclxuICBcclxuICBsZXQgdG90YWxQcm9ncmVzcyA9IDA7XHJcbiAgdG9waWNzLmZvckVhY2godG9waWNJZCA9PiB7XHJcbiAgICBjb25zdCB0b3BpY0xlc3NvbnMgPSBzdWJqZWN0LmNvbXBsZXRlZExlc3NvbnNbdG9waWNJZF0gfHwgW107XHJcbiAgICBjb25zdCB0b3BpY1Byb2dyZXNzID0gY2FsY3VsYXRlVG9waWNQcm9ncmVzcyh0b3BpY0xlc3NvbnMpO1xyXG4gICAgdG90YWxQcm9ncmVzcyArPSB0b3BpY1Byb2dyZXNzO1xyXG4gIH0pO1xyXG4gIFxyXG4gIHJldHVybiB0b3RhbFByb2dyZXNzIC8gdG90YWxUb3BpY3M7XHJcbn1cclxuXHJcbi8vIFVwZGF0ZSBzdHVkeSB0aW1lXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVTdHVkeVRpbWUodXNlcklkOiBzdHJpbmcsIG1pbnV0ZXNTdHVkaWVkOiBudW1iZXIpIHtcclxuICBjb25zdCB1c2VyUHJvZ3Jlc3NSZWYgPSBkb2MoZGIsICd1c2VyUHJvZ3Jlc3MnLCB1c2VySWQpO1xyXG4gIGNvbnN0IHByb2dyZXNzID0gYXdhaXQgZ2V0VXNlclByb2dyZXNzKHVzZXJJZCk7XHJcblxyXG4gIGlmIChwcm9ncmVzcykge1xyXG4gICAgY29uc3QgdG90YWxTdHVkeVRpbWUgPSBwcm9ncmVzcy50b3RhbFN0dWR5VGltZSArIG1pbnV0ZXNTdHVkaWVkO1xyXG4gICAgYXdhaXQgdXBkYXRlRG9jKHVzZXJQcm9ncmVzc1JlZiwgeyB0b3RhbFN0dWR5VGltZSB9KTtcclxuICB9XHJcbn1cclxuXHJcbi8vIE1hcmsgdG9waWMgYXMgY29tcGxldGVkXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYXJrVG9waWNDb21wbGV0ZWQodXNlcklkOiBzdHJpbmcsIHN1YmplY3RJZDogc3RyaW5nLCB0b3BpY0lkOiBzdHJpbmcpIHtcclxuICBjb25zdCB1c2VyUHJvZ3Jlc3NSZWYgPSBkb2MoZGIsICd1c2VyUHJvZ3Jlc3MnLCB1c2VySWQpO1xyXG4gIGNvbnN0IHByb2dyZXNzID0gYXdhaXQgZ2V0VXNlclByb2dyZXNzKHVzZXJJZCk7XHJcblxyXG4gIGlmIChwcm9ncmVzcykge1xyXG4gICAgY29uc3Qgc3ViamVjdCA9IHByb2dyZXNzLnN1YmplY3RzW3N1YmplY3RJZF0gfHwge1xyXG4gICAgICBwcm9ncmVzczogMCxcclxuICAgICAgY29tcGxldGVkVG9waWNzOiBbXSxcclxuICAgICAgbGFzdFN0dWRpZWQ6IG5ldyBEYXRlKClcclxuICAgIH07XHJcblxyXG4gICAgaWYgKCFzdWJqZWN0LmNvbXBsZXRlZFRvcGljcy5pbmNsdWRlcyh0b3BpY0lkKSkge1xyXG4gICAgICBjb25zdCB1cGRhdGVkU3ViamVjdHMgPSB7XHJcbiAgICAgICAgLi4ucHJvZ3Jlc3Muc3ViamVjdHMsXHJcbiAgICAgICAgW3N1YmplY3RJZF06IHtcclxuICAgICAgICAgIC4uLnN1YmplY3QsXHJcbiAgICAgICAgICBjb21wbGV0ZWRUb3BpY3M6IFsuLi5zdWJqZWN0LmNvbXBsZXRlZFRvcGljcywgdG9waWNJZF0sXHJcbiAgICAgICAgICBsYXN0U3R1ZGllZDogbmV3IERhdGUoKVxyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIGF3YWl0IHVwZGF0ZURvYyh1c2VyUHJvZ3Jlc3NSZWYsIHsgc3ViamVjdHM6IHVwZGF0ZWRTdWJqZWN0cyB9KTtcclxuXHJcbiAgICAgIC8vIEFkZCBhY3Rpdml0eVxyXG4gICAgICBjb25zdCBhY3Rpdml0eTogU3R1ZHlBY3Rpdml0eSA9IHtcclxuICAgICAgICBpZDogRGF0ZS5ub3coKS50b1N0cmluZygpLFxyXG4gICAgICAgIHR5cGU6ICdzdHVkeScsXHJcbiAgICAgICAgc3ViamVjdDogc3ViamVjdElkLFxyXG4gICAgICAgIHRvcGljOiB0b3BpY0lkLFxyXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgYXdhaXQgYWRkQWN0aXZpdHkodXNlcklkLCBhY3Rpdml0eSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vLyBVcGRhdGUgc3RyZWFrXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVTdHJlYWsodXNlcklkOiBzdHJpbmcpIHtcclxuICBjb25zdCB1c2VyUHJvZ3Jlc3NSZWYgPSBkb2MoZGIsICd1c2VyUHJvZ3Jlc3MnLCB1c2VySWQpO1xyXG4gIGNvbnN0IHByb2dyZXNzID0gYXdhaXQgZ2V0VXNlclByb2dyZXNzKHVzZXJJZCk7XHJcblxyXG4gIGlmIChwcm9ncmVzcykge1xyXG4gICAgY29uc3QgbGFzdFN0dWR5RGF0ZSA9IG5ldyBEYXRlKHByb2dyZXNzLmxhc3RTdHVkeURhdGUpO1xyXG4gICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xyXG4gICAgY29uc3QgZGlmZkRheXMgPSBNYXRoLmZsb29yKCh0b2RheS5nZXRUaW1lKCkgLSBsYXN0U3R1ZHlEYXRlLmdldFRpbWUoKSkgLyAoMTAwMCAqIDYwICogNjAgKiAyNCkpO1xyXG5cclxuICAgIGxldCBjdXJyZW50U3RyZWFrID0gcHJvZ3Jlc3MuY3VycmVudFN0cmVhaztcclxuICAgIGlmIChkaWZmRGF5cyA9PT0gMSkge1xyXG4gICAgICAvLyBDb25zZWN1dGl2ZSBkYXlcclxuICAgICAgY3VycmVudFN0cmVhayArPSAxO1xyXG4gICAgICBjb25zdCBsb25nZXN0U3RyZWFrID0gTWF0aC5tYXgoY3VycmVudFN0cmVhaywgcHJvZ3Jlc3MubG9uZ2VzdFN0cmVhayk7XHJcbiAgICAgIGF3YWl0IHVwZGF0ZURvYyh1c2VyUHJvZ3Jlc3NSZWYsIHtcclxuICAgICAgICBjdXJyZW50U3RyZWFrLFxyXG4gICAgICAgIGxvbmdlc3RTdHJlYWssXHJcbiAgICAgICAgbGFzdFN0dWR5RGF0ZTogdG9kYXlcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2UgaWYgKGRpZmZEYXlzID4gMSkge1xyXG4gICAgICAvLyBTdHJlYWsgYnJva2VuXHJcbiAgICAgIGF3YWl0IHVwZGF0ZURvYyh1c2VyUHJvZ3Jlc3NSZWYsIHtcclxuICAgICAgICBjdXJyZW50U3RyZWFrOiAxLFxyXG4gICAgICAgIGxhc3RTdHVkeURhdGU6IHRvZGF5XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENoZWNrIGZvciBzdHJlYWsgYWNoaWV2ZW1lbnRzXHJcbiAgICBpZiAoY3VycmVudFN0cmVhayA9PT0gNykge1xyXG4gICAgICBhd2FpdCBhZGRBY2hpZXZlbWVudCh1c2VySWQsIHtcclxuICAgICAgICBpZDogJ3dlZWstc3RyZWFrJyxcclxuICAgICAgICB0aXRsZTogJ1dlZWsgV2FycmlvcicsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdTdHVkaWVkIGZvciA3IGRheXMgaW4gYSByb3chJyxcclxuICAgICAgICB1bmxvY2tlZEF0OiBuZXcgRGF0ZSgpLFxyXG4gICAgICAgIGljb246ICfwn5SlJ1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbi8vIEFkZCBhY2hpZXZlbWVudFxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWRkQWNoaWV2ZW1lbnQodXNlcklkOiBzdHJpbmcsIGFjaGlldmVtZW50OiBBY2hpZXZlbWVudCkge1xyXG4gIGNvbnN0IHVzZXJQcm9ncmVzc1JlZiA9IGRvYyhkYiwgJ3VzZXJQcm9ncmVzcycsIHVzZXJJZCk7XHJcbiAgY29uc3QgcHJvZ3Jlc3MgPSBhd2FpdCBnZXRVc2VyUHJvZ3Jlc3ModXNlcklkKTtcclxuXHJcbiAgaWYgKHByb2dyZXNzKSB7XHJcbiAgICBjb25zdCBoYXNBY2hpZXZlbWVudCA9IHByb2dyZXNzLnJlY2VudEFjdGl2aXR5LnNvbWUoXHJcbiAgICAgIGFjdGl2aXR5ID0+IGFjdGl2aXR5LnRvcGljID09PSBhY2hpZXZlbWVudC50aXRsZVxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgaWYgKCFoYXNBY2hpZXZlbWVudCkge1xyXG4gICAgICBjb25zdCBhY3Rpdml0eTogU3R1ZHlBY3Rpdml0eSA9IHtcclxuICAgICAgICBpZDogRGF0ZS5ub3coKS50b1N0cmluZygpLFxyXG4gICAgICAgIHR5cGU6ICdzdHVkeScsXHJcbiAgICAgICAgc3ViamVjdDogJ2FjaGlldmVtZW50cycsXHJcbiAgICAgICAgdG9waWM6IGFjaGlldmVtZW50LnRpdGxlLFxyXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgYXdhaXQgYWRkQWN0aXZpdHkodXNlcklkLCBhY3Rpdml0eSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vLyBBZGQgYWN0aXZpdHlcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFkZEFjdGl2aXR5KHVzZXJJZDogc3RyaW5nLCBhY3Rpdml0eTogU3R1ZHlBY3Rpdml0eSkge1xyXG4gIGNvbnN0IHVzZXJQcm9ncmVzc1JlZiA9IGRvYyhkYiwgJ3VzZXJQcm9ncmVzcycsIHVzZXJJZCk7XHJcbiAgY29uc3QgcHJvZ3Jlc3MgPSBhd2FpdCBnZXRVc2VyUHJvZ3Jlc3ModXNlcklkKTtcclxuXHJcbiAgaWYgKHByb2dyZXNzKSB7XHJcbiAgICAvLyBFbnN1cmUgdGltZXN0YW1wIGlzIHN0b3JlZCBhcyBhIEZpcmVzdG9yZSB0aW1lc3RhbXBcclxuICAgIGNvbnN0IGFjdGl2aXR5V2l0aFRpbWVzdGFtcCA9IHtcclxuICAgICAgLi4uYWN0aXZpdHksXHJcbiAgICAgIHRpbWVzdGFtcDogYWN0aXZpdHkudGltZXN0YW1wIGluc3RhbmNlb2YgRGF0ZSBcclxuICAgICAgICA/IGFjdGl2aXR5LnRpbWVzdGFtcC50b0lTT1N0cmluZygpXHJcbiAgICAgICAgOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgdXBkYXRlZEFjdGl2aXRpZXMgPSBbYWN0aXZpdHlXaXRoVGltZXN0YW1wLCAuLi5wcm9ncmVzcy5yZWNlbnRBY3Rpdml0eV0uc2xpY2UoMCwgMTApOyAvLyBLZWVwIG9ubHkgbGFzdCAxMCBhY3Rpdml0aWVzXHJcbiAgICBhd2FpdCB1cGRhdGVEb2ModXNlclByb2dyZXNzUmVmLCB7XHJcbiAgICAgIHJlY2VudEFjdGl2aXR5OiB1cGRhdGVkQWN0aXZpdGllc1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBSZWNvcmQgcXVpeiBjb21wbGV0aW9uXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWNvcmRRdWl6Q29tcGxldGlvbih1c2VySWQ6IHN0cmluZywgc3ViamVjdDogc3RyaW5nLCBzY29yZTogbnVtYmVyKSB7XHJcbiAgY29uc3QgYWN0aXZpdHk6IFN0dWR5QWN0aXZpdHkgPSB7XHJcbiAgICBpZDogRGF0ZS5ub3coKS50b1N0cmluZygpLFxyXG4gICAgdHlwZTogJ3N0dWR5JyxcclxuICAgIHN1YmplY3QsXHJcbiAgICB0b3BpYzogJ3F1aXonLFxyXG4gICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxyXG4gICAgc2NvcmVcclxuICB9O1xyXG5cclxuICBhd2FpdCBhZGRBY3Rpdml0eSh1c2VySWQsIGFjdGl2aXR5KTtcclxuXHJcbiAgLy8gQ2hlY2sgZm9yIGFjaGlldmVtZW50c1xyXG4gIGlmIChzY29yZSA+PSA5MCkge1xyXG4gICAgYXdhaXQgYWRkQWNoaWV2ZW1lbnQodXNlcklkLCB7XHJcbiAgICAgIGlkOiAnaGlnaC1zY29yZXInLFxyXG4gICAgICB0aXRsZTogJ0hpZ2ggU2NvcmVyJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdTY29yZWQgOTAlIG9yIGhpZ2hlciBvbiBhIHF1aXohJyxcclxuICAgICAgdW5sb2NrZWRBdDogbmV3IERhdGUoKSxcclxuICAgICAgaWNvbjogJ/Cfjq8nXHJcbiAgICB9KTtcclxuICB9XHJcbn0gIl0sIm5hbWVzIjpbImRiIiwiZG9jIiwiZ2V0RG9jIiwic2V0RG9jIiwidXBkYXRlRG9jIiwiaW5pdGlhbGl6ZVVzZXJQcm9ncmVzcyIsInVzZXJJZCIsInVzZXJQcm9ncmVzc1JlZiIsImluaXRpYWxQcm9ncmVzcyIsInN1YmplY3RzIiwidG90YWxTdHVkeVRpbWUiLCJjdXJyZW50U3RyZWFrIiwibG9uZ2VzdFN0cmVhayIsImxhc3RTdHVkeURhdGUiLCJEYXRlIiwicmVjZW50QWN0aXZpdHkiLCJnZXRVc2VyUHJvZ3Jlc3MiLCJkb2NTbmFwIiwiZXhpc3RzIiwiZGF0YSIsIm1hcCIsImFjdGl2aXR5IiwidGltZXN0YW1wIiwiaXNOYU4iLCJnZXRUaW1lIiwiY29uc29sZSIsImVycm9yIiwibWFya0xlc3NvbkNvbXBsZXRlZCIsInN1YmplY3RJZCIsInRvcGljSWQiLCJsZXNzb25JZCIsInByb2dyZXNzIiwic3ViamVjdCIsImNvbXBsZXRlZFRvcGljcyIsImNvbXBsZXRlZExlc3NvbnMiLCJsYXN0U3R1ZGllZCIsInRvcGljTGVzc29ucyIsImluY2x1ZGVzIiwicHVzaCIsInRvcGljUHJvZ3Jlc3MiLCJjYWxjdWxhdGVUb3BpY1Byb2dyZXNzIiwidXBkYXRlZFN1YmplY3RzIiwiY2FsY3VsYXRlU3ViamVjdFByb2dyZXNzIiwiaWQiLCJub3ciLCJ0b1N0cmluZyIsInR5cGUiLCJ0b3BpYyIsImFkZEFjdGl2aXR5IiwidG90YWxMZXNzb25zIiwibGVuZ3RoIiwidXBkYXRlZFRvcGljSWQiLCJ1cGRhdGVkVG9waWNQcm9ncmVzcyIsInRvcGljcyIsIk9iamVjdCIsImtleXMiLCJ0b3RhbFRvcGljcyIsInRvdGFsUHJvZ3Jlc3MiLCJmb3JFYWNoIiwidXBkYXRlU3R1ZHlUaW1lIiwibWludXRlc1N0dWRpZWQiLCJtYXJrVG9waWNDb21wbGV0ZWQiLCJ1cGRhdGVTdHJlYWsiLCJ0b2RheSIsImRpZmZEYXlzIiwiTWF0aCIsImZsb29yIiwibWF4IiwiYWRkQWNoaWV2ZW1lbnQiLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwidW5sb2NrZWRBdCIsImljb24iLCJhY2hpZXZlbWVudCIsImhhc0FjaGlldmVtZW50Iiwic29tZSIsImFjdGl2aXR5V2l0aFRpbWVzdGFtcCIsInRvSVNPU3RyaW5nIiwidXBkYXRlZEFjdGl2aXRpZXMiLCJzbGljZSIsInJlY29yZFF1aXpDb21wbGV0aW9uIiwic2NvcmUiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/utils/userProgress.ts\n"));

/***/ })

});